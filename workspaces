#!/usr/bin/env bash

set -e

PREFIX=$HOME/w
WORKSPACES_NIX=${NIX_SRC-`pwd`}/workspaces.nix

# Hold and wait for input before exiting after an error.
# So 'xterm -e workspaces open -f ...' don't exit immediately on error
wait_input_and_exit ()
{
  local x=$?
  echo "$@" >&2
  echo "Press enter to close." >&2
  read
  exit $x
}

# To variables 'workspace_names' (array)
eval_workspace_names ()
{
  local config_eval config
  config=`realpath "$1"`
  eval_json=`nix eval -f "$WORKSPACES_NIX" --json --arg pkgs "import <nixpkgs> {}" --argstr config "$config" workspace_names`
  readarray -t workspace_names < <(jq -r '.[]' <<<"$eval_json")
}

open_workspace ()
{
  local wname="$1" config
  local -a buildInputs
  config=`realpath "$2"`
  p=$PREFIX/$wname

  readarray -t buildInputs < <(
    nix-build --no-out-link \
    --argstr workspaces_nix "$WORKSPACES_NIX" \
    --argstr config "$config" \
    --argstr wname "$wname" \
    -E '
  { pkgs ? import <nixpkgs> {}, workspaces_nix, config, wname }:
  let ws = import workspaces_nix { inherit pkgs config; }; in
  ws.by_name { inherit wname; }') || wait_input_and_exit "Building of $wname in $2 failed."

  mkdir -p "$p"
  cd "$p"
  nix-shell -p "${buildInputs[@]}" --run workspace-activate || wait_input_and_exit "Activating failed."

  local cmd="workspace-open"
  local local_shell="$p/shell.nix"
  if [[ -e $local_shell ]]; then
    echo "Using $local_shell"
    cmd="nix-shell '$local_shell' --run '$cmd'"
  fi
  nix-shell -p "${buildInputs[@]}" --run "$cmd" || wait_input_and_exit "Opening failed."
}

# Options
cmd=${1-}
shift || true
while getopts ":f:" opt; do
	case "$opt" in
		f) config=$OPTARG ;;
		*) exit 2 ;;
	esac
done
shift $((OPTIND-1))

USAGE_OPEN="open -f <config> <workspace name>"
USAGE_LIST="list -f <config>"

case "$cmd" in
  "open")
    wname=${1:?Usage: workspaces $USAGE_OPEN}
    open_workspace "$wname" "${config:?Usage: workspaces $USAGE_OPEN}"
    ;;

  "list")
    declare -a workspace_names
    eval_workspace_names "${config:?Usage: workspaces $USAGE_LIST}"
    for wname in "${workspace_names[@]}"; do
      echo "$wname"
    done
    ;;

  *)
    cat <<EOF >&2
Usage: workspaces { open | list }

  $USAGE_OPEN
    Open the specified workspace. A directory in $PREFIX is created if it
    doesn't exist, the activation script is run and finally the shell is opened.

  $USAGE_LIST
    List workspaces.
EOF
    ;;
esac
